(function ($, window, undefined) { "use strict"; $.fn.tabslet = function (options) { var defaults = { mouseevent: "click", activeclass: "active", attribute: "href", animation: !1, autorotate: !1, deeplinking: !1, pauseonhover: !0, delay: 2e3, active: 1, container: !1, element_container: !1, controls: { prev: ".prev", next: ".next" } }, options = $.extend(defaults, options); return this.each(function () { var $this = $(this), _cache_li = [], _cache_div = [], _container = options.container ? $(options.container) : $this, _tabs = _container.find("> div"), _elements = options.element_container ? $(options.element_container) : $this; _tabs.each(function () { _cache_div.push($(this).css("display")) }); var elements = _elements.find("> ul > li"), i = options.active - 1; if (!$this.data("tabslet-init")) { function deep_link() { var a = []; elements.find("a").each(function () { a.push($(this).attr($this.opts.attribute)) }); var b = $.inArray(location.hash, a); return -1 < b ? b + 1 : $this.data("active") || options.active } $this.data("tabslet-init", !0), $this.opts = [], $.map(["mouseevent", "activeclass", "attribute", "animation", "autorotate", "deeplinking", "pauseonhover", "delay", "container"], function (a) { $this.opts[a] = $this.data(a) || options[a] }), $this.opts.active = $this.opts.deeplinking ? deep_link() : $this.data("active") || options.active, _tabs.hide(), $this.opts.active && (_tabs.eq($this.opts.active - 1).show(), elements.eq($this.opts.active - 1).addClass(options.activeclass)); var fn = eval(function (a, b) { var c = b ? elements.find("a[" + $this.opts.attribute + "=\"" + b + "\"]").parent() : $(this); c.trigger("_before"), elements.removeClass(options.activeclass), c.addClass(options.activeclass), _tabs.stop(!0, !0), _tabs.hide(), i = elements.index(c); var d = b || c.find("a").attr($this.opts.attribute); return $this.opts.deeplinking && (location.hash = d), $this.opts.animation ? _container.find(d).animate({ opacity: "show" }, "slow", function () { c.trigger("_after") }) : (_container.find(d).show(), c.trigger("_after")), !1 }), init = eval("elements." + $this.opts.mouseevent + "(fn)"); var t, forward = function () { i = ++i % elements.length, "hover" == $this.opts.mouseevent ? elements.eq(i).trigger("mouseover") : elements.eq(i).click(), $this.opts.autorotate && (clearTimeout(t), t = setTimeout(forward, $this.opts.delay), $this.mouseover(function () { $this.opts.pauseonhover && clearTimeout(t) })) }; $this.opts.autorotate && (t = setTimeout(forward, $this.opts.delay), $this.hover(function () { $this.opts.pauseonhover && clearTimeout(t) }, function () { t = setTimeout(forward, $this.opts.delay) }), $this.opts.pauseonhover && $this.on("mouseleave", function () { clearTimeout(t), t = setTimeout(forward, $this.opts.delay) })); var move = function (a) { "forward" == a && (i = ++i % elements.length), "backward" == a && (i = --i % elements.length), elements.eq(i).click() }; $this.find(options.controls.next).click(function () { move("forward") }), $this.find(options.controls.prev).click(function () { move("backward") }), $this.on("show", function (a, b) { fn(a, b) }), $this.on("next", function () { move("forward") }), $this.on("prev", function () { move("backward") }), $this.on("destroy", function () { $(this).removeData().find("> ul li").each(function () { $(this).removeClass(options.activeclass) }), _tabs.each(function (a) { $(this).removeAttr("style").css("display", _cache_div[a]) }) }) } }) }, $(document).ready(function () { $("[data-toggle=\"tabslet\"]").tabslet() }) })(jQuery);